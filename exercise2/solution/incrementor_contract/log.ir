contract {
    fn mint_coins<3cee32f5>(mint_amount !1: u64, dummy !2: u64) -> () {
        entry:
        v0 = asm(r1: mint_amount) {
            mint   r1, !4
        }
        br block0

        block0:
        v1 = phi(entry: v0)
        ret () v1
    }

    fn anon_0(amount !5: u64) -> () {
        entry:
        v0 = asm(r1: amount) {
            mint   r1, !4
        }
        ret () v0
    }

    fn burn_coins<45fd6f4c>(burn_amount !6: u64, dummy !7: u64) -> () {
        entry:
        v0 = asm(r1: burn_amount) {
            burn   r1, !8
        }
        br block0

        block0:
        v1 = phi(entry: v0)
        ret () v1
    }

    fn anon_1(amount !9: u64) -> () {
        entry:
        v0 = asm(r1: amount) {
            burn   r1, !8
        }
        ret () v0
    }

    fn force_transfer_coins<a03449eb>(coins !10: u64, asset_id !11: { b256 }, target !12: { b256 }) -> () {
        entry:
        v0 = extract_value asset_id, { b256 }, 0, !14
        v1 = extract_value target, { b256 }, 0, !15
        v2 = asm(r1: coins, r2: v0, r3: v1) {
            tr     r3 r1 r2, !16
        }
        br block0

        block0:
        v3 = phi(entry: v2)
        ret () v3
    }

    fn anon_2(amount !17: u64, asset_id !18: { b256 }, contract_id !19: { b256 }) -> () {
        entry:
        v0 = extract_value asset_id, { b256 }, 0, !14
        v1 = extract_value contract_id, { b256 }, 0, !15
        v2 = asm(r1: amount, r2: v0, r3: v1) {
            tr     r3 r1 r2, !16
        }
        ret () v2
    }

    fn transfer_coins_to_output<7702d792>(coins !20: u64, asset_id !21: { b256 }, recipient !22: { b256 }) -> () {
        local ptr u64 OUTPUT_LENGTH_LOCATION
        local ptr u64 OUTPUT_VARIABLE_TYPE
        local ptr u64 amount_
        local mut ptr u64 index
        local ptr u64 length
        local mut ptr bool output_found
        local mut ptr u64 output_index
        local ptr u64 output_start
        local ptr u64 type

        entry:
        v0 = get_ptr ptr u64 OUTPUT_LENGTH_LOCATION, ptr u64, 0, !23
        v1 = const u64 56, !24
        store v1, ptr v0, !23
        v2 = get_ptr ptr u64 OUTPUT_VARIABLE_TYPE, ptr u64, 0, !25
        v3 = const u64 4, !26
        store v3, ptr v2, !25
        v4 = get_ptr ptr u64 OUTPUT_LENGTH_LOCATION, ptr u64, 0, !27
        v5 = load ptr v4, !27
        v6 = asm(outputs_length, outputs_length_ptr: v5) -> u64 outputs_length, !28 {
            lb     outputs_length outputs_length_ptr i0, !29
        }
        v7 = get_ptr ptr u64 length, ptr u64, 0, !30
        store v6, ptr v7, !30
        v8 = get_ptr mut ptr u64 index, ptr u64, 0, !31
        v9 = const u64 0, !32
        store v9, ptr v8, !31
        v10 = get_ptr mut ptr u64 output_index, ptr u64, 0, !33
        v11 = const u64 0, !34
        store v11, ptr v10, !33
        v12 = get_ptr mut ptr bool output_found, ptr bool, 0, !35
        v13 = const bool false, !36
        store v13, ptr v12, !35
        br anon_3_while

        anon_3_while:
        v14 = get_ptr mut ptr u64 index, ptr u64, 0, !37
        v15 = load ptr v14, !37
        v16 = get_ptr ptr u64 length, ptr u64, 0, !38
        v17 = load ptr v16, !38
        v18 = asm(r1: v15, r2: v17, r3) -> bool r3, !40 {
            lt     r3 r1 r2, !41
        }
        br block1

        block1:
        v19 = phi(anon_3_while: v18)
        cbr v19, anon_3_while_body, anon_3_end_while

        anon_3_while_body:
        v20 = get_ptr mut ptr u64 index, ptr u64, 0, !42
        v21 = load ptr v20, !42
        v22 = asm(n: v21, offset) -> u64 offset, !43 {
            xos    offset n, !44
        }
        v23 = get_ptr ptr u64 output_start, ptr u64, 0, !45
        store v22, ptr v23, !45
        v24 = get_ptr ptr u64 output_start, ptr u64, 0, !46
        v25 = load ptr v24, !46
        v26 = asm(offset: v25, t) -> u64 t, !47 {
            lb     t offset i0, !48
        }
        v27 = get_ptr ptr u64 type, ptr u64, 0, !49
        store v26, ptr v27, !49
        v28 = get_ptr ptr u64 type, ptr u64, 0, !50
        v29 = load ptr v28, !50
        v30 = get_ptr ptr u64 OUTPUT_VARIABLE_TYPE, ptr u64, 0, !51
        v31 = load ptr v30, !51
        v32 = asm(r1: v29, r2: v31, r3) -> bool r3, !52 {
            eq     r3 r1 r2, !53
        }
        br block2

        block2:
        v33 = phi(anon_3_while_body: v32)
        cbr v33, anon_3_block0, anon_3_block4, !54

        anon_3_block0:
        v34 = get_ptr mut ptr u64 index, ptr u64, 0, !55
        v35 = load ptr v34, !55
        v36 = get_ptr ptr u64 output_start, ptr u64, 0, !56
        v37 = load ptr v36, !56
        v38 = asm(n: v35, a, amount_ptr, output: v37) -> u64 a, !57 {
            addi   amount_ptr output i40, !58
            lw     a amount_ptr i0, !59
        }
        v39 = get_ptr ptr u64 amount_, ptr u64, 0, !60
        store v38, ptr v39, !60
        v40 = get_ptr ptr u64 amount_, ptr u64, 0, !61
        v41 = load ptr v40, !61
        v42 = const u64 0, !62
        v43 = asm(r1: v41, r2: v42, r3) -> bool r3, !63 {
            eq     r3 r1 r2, !64
        }
        br block3

        block3:
        v44 = phi(anon_3_block0: v43)
        cbr v44, anon_3_block1, anon_3_block2, !65

        anon_3_block1:
        v45 = get_ptr mut ptr u64 index, ptr u64, 0, !66
        v46 = load ptr v45, !66
        v47 = get_ptr mut ptr u64 output_index, ptr u64, 0, !67
        store v46, ptr v47, !67
        v48 = get_ptr mut ptr bool output_found, ptr bool, 0, !68
        v49 = const bool true, !69
        store v49, ptr v48, !68
        v50 = get_ptr ptr u64 length, ptr u64, 0, !70
        v51 = load ptr v50, !70
        v52 = get_ptr mut ptr u64 index, ptr u64, 0, !71
        store v51, ptr v52, !71
        br anon_3_block3

        anon_3_block2:
        v53 = get_ptr mut ptr u64 index, ptr u64, 0, !72
        v54 = load ptr v53, !72
        v55 = const u64 1, !73
        v56 = asm(r1: v54, r2: v55, r3) -> u64 r3, !74 {
            add    r3 r2 r1, !75
        }
        br block4

        block4:
        v57 = phi(anon_3_block2: v56)
        v58 = get_ptr mut ptr u64 index, ptr u64, 0, !76
        store v57, ptr v58, !76
        br anon_3_block3

        anon_3_block3:
        v59 = phi(anon_3_block1: v51, block4: v57)
        br anon_3_block5

        anon_3_block4:
        v60 = get_ptr ptr u64 length, ptr u64, 0, !77
        v61 = load ptr v60, !77
        v62 = get_ptr mut ptr u64 index, ptr u64, 0, !78
        store v61, ptr v62, !78
        br anon_3_block5

        anon_3_block5:
        v63 = phi(anon_3_block3: v59, anon_3_block4: v61)
        br anon_3_while

        anon_3_end_while:
        v64 = get_ptr mut ptr bool output_found, ptr bool, 0, !79
        v65 = load ptr v64, !79
        v66 = asm(r1: v65, r2) -> bool r2, !80 {
            eq     r2 r1 zero, !81
        }
        br block5

        block5:
        v67 = phi(anon_3_end_while: v66)
        cbr v67, anon_3_block6, anon_3_block7, !82

        anon_3_block6:
        v68 = const u64 0, !83
        v69 = asm(r1: v68) {
            rvrt   r1, !85
        }
        br block6

        block6:
        v70 = phi(anon_3_block6: v69)
        br anon_3_block8

        anon_3_block7:
        v71 = get_ptr ptr u64 amount_, ptr u64, 0, !86
        v72 = load ptr v71, !86
        v73 = extract_value asset_id, { b256 }, 0, !87
        v74 = extract_value recipient, { b256 }, 0, !89
        v75 = get_ptr mut ptr u64 index, ptr u64, 0, !90
        v76 = load ptr v75, !90
        v77 = asm(amnt: v72, id: v73, recipient: v74, output: v76) {
            tro    recipient output amnt id, !91
        }
        br anon_3_block8

        anon_3_block8:
        v78 = phi(block6: v70, anon_3_block7: v77)
        br block0

        block0:
        v79 = phi(anon_3_block8: v78)
        ret () v79
    }

    fn anon_3(amount !92: u64, asset_id !93: { b256 }, recipient !94: { b256 }) -> () {
        local ptr u64 OUTPUT_LENGTH_LOCATION
        local ptr u64 OUTPUT_VARIABLE_TYPE
        local ptr u64 amount_
        local mut ptr u64 index
        local ptr u64 length
        local mut ptr bool output_found
        local mut ptr u64 output_index
        local ptr u64 output_start
        local ptr u64 type

        entry:
        v0 = get_ptr ptr u64 OUTPUT_LENGTH_LOCATION, ptr u64, 0, !23
        v1 = const u64 56, !24
        store v1, ptr v0, !23
        v2 = get_ptr ptr u64 OUTPUT_VARIABLE_TYPE, ptr u64, 0, !25
        v3 = const u64 4, !26
        store v3, ptr v2, !25
        v4 = get_ptr ptr u64 OUTPUT_LENGTH_LOCATION, ptr u64, 0, !27
        v5 = load ptr v4, !27
        v6 = asm(outputs_length, outputs_length_ptr: v5) -> u64 outputs_length, !28 {
            lb     outputs_length outputs_length_ptr i0, !29
        }
        v7 = get_ptr ptr u64 length, ptr u64, 0, !30
        store v6, ptr v7, !30
        v8 = get_ptr mut ptr u64 index, ptr u64, 0, !31
        v9 = const u64 0, !32
        store v9, ptr v8, !31
        v10 = get_ptr mut ptr u64 output_index, ptr u64, 0, !33
        v11 = const u64 0, !34
        store v11, ptr v10, !33
        v12 = get_ptr mut ptr bool output_found, ptr bool, 0, !35
        v13 = const bool false, !36
        store v13, ptr v12, !35
        br while

        while:
        v14 = get_ptr mut ptr u64 index, ptr u64, 0, !37
        v15 = load ptr v14, !37
        v16 = get_ptr ptr u64 length, ptr u64, 0, !38
        v17 = load ptr v16, !38
        v18 = call anon_7(v15, v17), !95
        cbr v18, while_body, end_while

        while_body:
        v19 = get_ptr mut ptr u64 index, ptr u64, 0, !42
        v20 = load ptr v19, !42
        v21 = asm(n: v20, offset) -> u64 offset, !43 {
            xos    offset n, !44
        }
        v22 = get_ptr ptr u64 output_start, ptr u64, 0, !45
        store v21, ptr v22, !45
        v23 = get_ptr ptr u64 output_start, ptr u64, 0, !46
        v24 = load ptr v23, !46
        v25 = asm(offset: v24, t) -> u64 t, !47 {
            lb     t offset i0, !48
        }
        v26 = get_ptr ptr u64 type, ptr u64, 0, !49
        store v25, ptr v26, !49
        v27 = get_ptr ptr u64 type, ptr u64, 0, !50
        v28 = load ptr v27, !50
        v29 = get_ptr ptr u64 OUTPUT_VARIABLE_TYPE, ptr u64, 0, !51
        v30 = load ptr v29, !51
        v31 = call anon_4(v28, v30), !96
        cbr v31, block0, block4, !54

        block0:
        v32 = get_ptr mut ptr u64 index, ptr u64, 0, !55
        v33 = load ptr v32, !55
        v34 = get_ptr ptr u64 output_start, ptr u64, 0, !56
        v35 = load ptr v34, !56
        v36 = asm(n: v33, a, amount_ptr, output: v35) -> u64 a, !57 {
            addi   amount_ptr output i40, !58
            lw     a amount_ptr i0, !59
        }
        v37 = get_ptr ptr u64 amount_, ptr u64, 0, !60
        store v36, ptr v37, !60
        v38 = get_ptr ptr u64 amount_, ptr u64, 0, !61
        v39 = load ptr v38, !61
        v40 = const u64 0, !62
        v41 = call anon_5(v39, v40), !97
        cbr v41, block1, block2, !65

        block1:
        v42 = get_ptr mut ptr u64 index, ptr u64, 0, !66
        v43 = load ptr v42, !66
        v44 = get_ptr mut ptr u64 output_index, ptr u64, 0, !67
        store v43, ptr v44, !67
        v45 = get_ptr mut ptr bool output_found, ptr bool, 0, !68
        v46 = const bool true, !69
        store v46, ptr v45, !68
        v47 = get_ptr ptr u64 length, ptr u64, 0, !70
        v48 = load ptr v47, !70
        v49 = get_ptr mut ptr u64 index, ptr u64, 0, !71
        store v48, ptr v49, !71
        br block3

        block2:
        v50 = get_ptr mut ptr u64 index, ptr u64, 0, !72
        v51 = load ptr v50, !72
        v52 = const u64 1, !73
        v53 = call anon_6(v51, v52), !98
        v54 = get_ptr mut ptr u64 index, ptr u64, 0, !76
        store v53, ptr v54, !76
        br block3

        block3:
        v55 = phi(block1: v48, block2: v53)
        br block5

        block4:
        v56 = get_ptr ptr u64 length, ptr u64, 0, !77
        v57 = load ptr v56, !77
        v58 = get_ptr mut ptr u64 index, ptr u64, 0, !78
        store v57, ptr v58, !78
        br block5

        block5:
        v59 = phi(block3: v55, block4: v57)
        br while

        end_while:
        v60 = get_ptr mut ptr bool output_found, ptr bool, 0, !79
        v61 = load ptr v60, !79
        v62 = call anon_8(v61), !99
        cbr v62, block6, block7, !82

        block6:
        v63 = const u64 0, !83
        v64 = call anon_9(v63), !100
        br block8

        block7:
        v65 = get_ptr ptr u64 amount_, ptr u64, 0, !86
        v66 = load ptr v65, !86
        v67 = extract_value asset_id, { b256 }, 0, !87
        v68 = extract_value recipient, { b256 }, 0, !89
        v69 = get_ptr mut ptr u64 index, ptr u64, 0, !90
        v70 = load ptr v69, !90
        v71 = asm(amnt: v66, id: v67, recipient: v68, output: v70) {
            tro    recipient output amnt id, !91
        }
        br block8

        block8:
        v72 = phi(block6: v64, block7: v71)
        ret () v72
    }

    fn anon_4(self !101: u64, other !102: u64) -> bool {
        entry:
        v0 = asm(r1: self, r2: other, r3) -> bool r3, !52 {
            eq     r3 r1 r2, !53
        }
        ret bool v0
    }

    fn anon_5(self !103: u64, other !104: u64) -> bool {
        entry:
        v0 = asm(r1: self, r2: other, r3) -> bool r3, !63 {
            eq     r3 r1 r2, !64
        }
        ret bool v0
    }

    fn anon_6(self !105: u64, other !106: u64) -> u64 {
        entry:
        v0 = asm(r1: self, r2: other, r3) -> u64 r3, !74 {
            add    r3 r2 r1, !75
        }
        ret u64 v0
    }

    fn anon_7(self !107: u64, other !108: u64) -> bool {
        entry:
        v0 = asm(r1: self, r2: other, r3) -> bool r3, !40 {
            lt     r3 r1 r2, !41
        }
        ret bool v0
    }

    fn anon_8(a !109: bool) -> bool {
        entry:
        v0 = asm(r1: a, r2) -> bool r2, !80 {
            eq     r2 r1 zero, !81
        }
        ret bool v0
    }

    fn anon_9(code !110: u64) -> () {
        entry:
        v0 = asm(r1: code) {
            rvrt   r1, !85
        }
        ret () v0
    }

    fn get_balance<6fc66a82>(target !111: { b256 }, asset_id !112: { b256 }) -> u64 {
        entry:
        v0 = extract_value target, { b256 }, 0, !113
        v1 = extract_value asset_id, { b256 }, 0, !114
        v2 = asm(balance, token: v0, contract: v1) -> u64 balance, !116 {
            bal    balance token contract, !117
        }
        br block0

        block0:
        v3 = phi(entry: v2)
        ret u64 v3
    }

    fn anon_10(asset_id !118: { b256 }, ctr_id !119: { b256 }) -> u64 {
        entry:
        v0 = extract_value asset_id, { b256 }, 0, !113
        v1 = extract_value ctr_id, { b256 }, 0, !114
        v2 = asm(balance, token: v0, contract: v1) -> u64 balance, !116 {
            bal    balance token contract, !117
        }
        ret u64 v2
    }
}

!0 = filepath "incrementor_contract/src/main.sw"
!1 = span !0 905 916
!2 = span !0 923 928
!3 = filepath "a1d77e1140d1b57ee18cc914d320dc7ffdff98fd/src/token.sw"
!4 = span !3 273 281
!5 = span !3 228 234
!6 = span !0 989 1000
!7 = span !0 1007 1012
!8 = span !3 410 418
!9 = span !3 365 371
!10 = span !0 1083 1088
!11 = span !0 1095 1103
!12 = span !0 1117 1123
!13 = filepath "a1d77e1140d1b57ee18cc914d320dc7ffdff98fd/src/contract_id.sw"
!14 = span !13 183 188
!15 = span !13 183 188
!16 = span !3 861 873
!17 = span !3 726 732
!18 = span !3 739 747
!19 = span !3 761 772
!20 = span !0 1227 1232
!21 = span !0 1239 1247
!22 = span !0 1261 1270
!23 = span !3 1425 1459
!24 = span !3 1456 1458
!25 = span !3 1464 1497
!26 = span !3 1493 1494
!27 = span !3 1626 1648
!28 = span !3 1586 1733
!29 = span !3 1660 1700
!30 = span !3 1569 1734
!31 = span !3 1813 1837
!32 = span !3 1833 1834
!33 = span !3 1842 1867
!34 = span !3 1865 1866
!35 = span !3 1872 1901
!36 = span !3 1895 1900
!37 = span !3 2134 2139
!38 = span !3 2142 2148
!39 = filepath "082bc8eb0616586ac0000825bfe6e9d47b0c713f/src/ops.sw"
!40 = span !39 8111 8197
!41 = span !39 8154 8166
!42 = span !3 2185 2190
!43 = span !3 2178 2297
!44 = span !3 2214 2227
!45 = span !3 2159 2298
!46 = span !3 2331 2343
!47 = span !3 2319 2455
!48 = span !3 2362 2377
!49 = span !3 2308 2456
!50 = span !3 2527 2531
!51 = span !3 2535 2555
!52 = span !39 5789 5875
!53 = span !39 5832 5844
!54 = span !3 2527 2555
!55 = span !3 2590 2595
!56 = span !3 2620 2632
!57 = span !3 2583 2752
!58 = span !3 2652 2679
!59 = span !3 2696 2715
!60 = span !3 2570 2753
!61 = span !3 2811 2817
!62 = span !3 2821 2822
!63 = span !39 5307 5393
!64 = span !39 5350 5362
!65 = span !3 2811 2822
!66 = span !3 2963 2968
!67 = span !3 2948 2969
!68 = span !3 2986 3006
!69 = span !3 3001 3005
!70 = span !3 3152 3158
!71 = span !3 3144 3159
!72 = span !3 3321 3326
!73 = span !3 3329 3330
!74 = span !39 139 225
!75 = span !39 182 195
!76 = span !3 3313 3331
!77 = span !3 3384 3390
!78 = span !3 3376 3391
!79 = span !3 3467 3479
!80 = span !39 8407 8469
!81 = span !39 8432 8446
!82 = span !39 8340 8471
!83 = span !3 3548 3549
!84 = filepath "a1d77e1140d1b57ee18cc914d320dc7ffdff98fd/src/chain.sw"
!85 = span !84 573 581
!86 = span !3 3615 3621
!87 = span !13 183 188
!88 = filepath "a1d77e1140d1b57ee18cc914d320dc7ffdff98fd/src/address.sw"
!89 = span !88 173 178
!90 = span !3 3679 3684
!91 = span !3 3700 3729
!92 = span !3 980 986
!93 = span !3 993 1001
!94 = span !3 1015 1024
!95 = span !3 2134 2148
!96 = span !3 2527 2555
!97 = span !3 2811 2822
!98 = span !3 3321 3330
!99 = span !39 8340 8471
!100 = span !84 519 589
!101 = span !39 5752 5756
!102 = span !39 5758 5763
!103 = span !39 5270 5274
!104 = span !39 5276 5281
!105 = span !39 102 106
!106 = span !39 108 113
!107 = span !39 8074 8078
!108 = span !39 8080 8085
!109 = span !39 8351 8352
!110 = span !84 532 536
!111 = span !0 1365 1371
!112 = span !0 1385 1393
!113 = span !13 183 188
!114 = span !13 183 188
!115 = filepath "a1d77e1140d1b57ee18cc914d320dc7ffdff98fd/src/context.sw"
!116 = span !115 653 777
!117 = span !115 723 750
!118 = span !115 598 606
!119 = span !115 620 626

  Bytecode size is 460 bytes.
