.program:
ji   i4
noop
DATA_SECTION_OFFSET[0..32]
DATA_SECTION_OFFSET[32..64]
lw   $ds $is 1
add  $$ds $$ds $is
lw   $r1 $fp i73              ; load input function selector
lw   $r0 data_1               ; load fn selector for comparison
eq   $r0 $r1 $r0              ; function selector comparison
jnei $zero $r0 i17            ; jump to selected function
lw   $r0 data_2               ; load fn selector for comparison
eq   $r0 $r1 $r0              ; function selector comparison
jnei $zero $r0 i49            ; jump to selected function
lw   $r0 data_3               ; load fn selector for comparison
eq   $r0 $r1 $r0              ; function selector comparison
jnei $zero $r0 i81            ; jump to selected function
rvrt $zero                    ; revert if no selectors matched
lw   $r1 $fp i74              ; loading argument into abi function
lw   $r0 $r1 i0               ; Loading copy type: u64
lw   $r1 $r1 i1               ; Loading copy type: u64
lw   $r1 data_0               ; HashMethod enum instantiation
move $r3 $sp                  ; load $sp for enum pointer
cfei i16
mcli $r3 i2
sw   $r3 $r1 i0
lw   $r2 data_0               ; HashMethod enum instantiation
move $r1 $sp                  ; load $sp for enum pointer
cfei i16
mcli $r1 i2
sw   $r1 $r2 i0
addi $r2 $zero i8
meq  $r1 $r3 $r1 $r2
jnei $r1 $one i41
move $r1 $sp
cfei i8
sw   $r1 $r0 i0
move $r2 $sp
cfei i32
addi $r1 $zero i8
s256 $r2 $r0 $r1
ji   i48                      ; end of then branch
move $r1 $sp
cfei i8
sw   $r1 $r0 i0
move $r2 $sp
cfei i32
addi $r1 $zero i8
k256 $r2 $r0 $r1
ret  $zero                    ; fn initialize returns unit
lw   $r0 $fp i74              ; loading argument into abi function
lw   $r3 $r0 i0               ; Loading copy type: u64
lw   $r0 $r0 i1               ; Loading copy type: u64
lw   $r0 data_0               ; HashMethod enum instantiation
move $r1 $sp                  ; load $sp for enum pointer
cfei i16
mcli $r1 i2
sw   $r1 $r0 i0
lw   $r0 data_0               ; HashMethod enum instantiation
move $r2 $sp                  ; load $sp for enum pointer
cfei i16
mcli $r2 i2
sw   $r2 $r0 i0
addi $r0 $zero i8
meq  $r0 $r1 $r2 $r0
jnei $r0 $one i73
move $r0 $sp
cfei i8
sw   $r0 $r3 i0
move $r1 $sp
cfei i32
addi $r0 $zero i8
s256 $r1 $r3 $r0
ji   i80                      ; end of then branch
move $r0 $sp
cfei i8
sw   $r0 $r3 i0
move $r1 $sp
cfei i32
addi $r0 $zero i8
k256 $r1 $r3 $r0
ret  $zero                    ; fn increment returns unit
lw   $r3 $fp i74              ; loading argument into abi function
lw   $r0 data_0               ; HashMethod enum instantiation
move $r1 $sp                  ; load $sp for enum pointer
cfei i16
mcli $r1 i2
sw   $r1 $r0 i0
lw   $r0 data_0               ; HashMethod enum instantiation
move $r2 $sp                  ; load $sp for enum pointer
cfei i16
mcli $r2 i2
sw   $r2 $r0 i0
addi $r0 $zero i8
meq  $r0 $r1 $r2 $r0
jnei $r0 $one i103
move $r0 $sp
cfei i8
sw   $r0 $r3 i0
move $r1 $sp
cfei i32
addi $r0 $zero i8
s256 $r1 $r3 $r0
ji   i110                     ; end of then branch
move $r0 $sp
cfei i8
sw   $r0 $r3 i0
move $r1 $sp
cfei i32
addi $r0 $zero i8
k256 $r1 $r3 $r0
lw   $r0 data_0               ; literal instantiation
ret  $r0                      ; get fn return value
noop                          ; word-alignment of data section
.data:
data_0 .u64 0x00
data_1 .u32 0xd72f4957
data_2 .u32 0xdae61e49
data_3 .u32 0xa809c975

  Bytecode size is 484 bytes.
